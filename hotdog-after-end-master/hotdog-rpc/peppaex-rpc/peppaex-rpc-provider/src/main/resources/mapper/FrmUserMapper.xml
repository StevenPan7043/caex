<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 这里的namespace名字必须为执行该sql的dao地址 或者Mapper的地址 -->
<mapper namespace="com.pmzhongguo.zzexrpcprovider.mapper.framework.FrmUserMapper">
    <select id="getDictionaryDataList" parameterType="string" resultType="java.util.HashMap">
        select * from frm_dictionary t
        <where>
            <if test="_parameter != null and _parameter != ''">
                AND dic_code = #{_parameter}
            </if>
        </where>
    </select>

    <select id="findById" parameterType="int" resultType="com.pmzhongguo.ex.framework.entity.FrmUser">
            SELECT t.* FROM frm_user t
			WHERE t.id =  #{id}
    </select>

    <select id="getAllUserPage" parameterType="java.util.Map" resultType="java.util.HashMap">
        SELECT a.*, o.o_name
        FROM frm_user a left join otc_owner o on a.otc_owner_id = o.id
        WHERE a.is_deleted = 0
        AND a.id != 1
        <if test="user_real_name != null">and a.user_real_name like "%" #{user_real_name} "%"</if>
        <if test="user_name != null and user_name != ''">and a.user_name like "%" #{user_name} "%"</if>
    </select>

    <insert id="insertUserBatch">
        insert into user values
        <!-- 注意 insert into t_vacation values 不要写在循环里,其次 #{vacation.em_id} 的方式,其中vacation 是item的值-->
        <foreach collection="list" item="frmUser" index="index" separator=",">
            (null,#{frmUser.userName},#{frmUser.password})
        </foreach>
    </insert>


    <select id="getLoginUser" parameterType="java.util.Map"
            resultType="com.pmzhongguo.ex.framework.entity.FrmUser">
            SELECT f.* FROM frm_user f 
            WHERE f.user_name=#{user_name} AND f.user_pwd=#{user_pwd}
            and is_deleted = 0
    </select>


    <select id="findConfig" resultType="com.pmzhongguo.ex.framework.entity.FrmConfig">
            SELECT * FROM frm_config
    </select>

    <select id="getUserRightList" parameterType="int" resultType="java.util.HashMap">
        <!-- 查出用户对应的权限 -->
        SELECT ff.fuc_name,ffu.fuc_url_url, ffu.is_need_log,ffu.fuc_url_desc
        FROM frm_function_url ffu
        LEFT JOIN frm_function ff ON ff.id = ffu.frm_function_id

        LEFT JOIN frm_user_function fuf ON fuf.frm_function_id = ff.id
        LEFT JOIN frm_user fu ON fu.id = fuf.frm_user_id
        WHERE 1=1
        <if test="userId != 1">AND fu.id=#{userId}</if>
        UNION
        SELECT ff.fuc_name,ff.fuc_url, ff.is_need_log,ff.fuc_desc
        FROM frm_function ff
        LEFT JOIN frm_user_function fuf ON ff.id = fuf.frm_function_id
        LEFT JOIN frm_user fu ON fuf.frm_function_id = ff.id
        WHERE ff.fuc_parent_id != '0'
        <if test="userId != 1">AND fu.id=#{userId}</if>
        <!-- 查出一些不需要授权的权限 -->
        UNION
        SELECT ff.fuc_name,ff.fuc_url, ff.is_need_log , ff.fuc_desc
        FROM frm_function ff WHERE ff.is_need_auth =0
        AND ff.fuc_parent_id != '0'
        UNION
        SELECT ff.fuc_name, ffu.fuc_url_url, ff.is_need_log, ff.fuc_desc
        FROM frm_function ff,frm_function_url ffu
        WHERE ff.id = ffu.frm_function_id
        AND ff.is_need_auth=0

    </select>

    <!-- 获得代售点菜单 -->
    <select id="getFactoryMenuList" parameterType="int" resultType="java.util.HashMap">
    	select a.*from(
    		SELECT ff.* FROM frm_function ff
				WHERE ff.is_use = '0'

		    UNION 
			
			SELECT ff.* FROM frm_function ff
				WHERE ff.is_need_auth = 0
		) a ORDER BY a.fuc_order
	</select>


    <!-- 获得用户菜单 -->
    <select id="getUserMenuList" parameterType="int" resultType="java.util.HashMap">
        <!-- 查出用户对应的菜单 -->
        select a.*from(
        SELECT
        ff.*
        FROM frm_function ff
        LEFT JOIN frm_user_function fuf ON fuf.frm_function_id = ff.id
        LEFT JOIN frm_user fu ON fu.id = fuf.frm_user_id
        where 1=1
        and ff.is_use = '1'

        <if test="userId != 1 and userId != null">AND fu.id=#{userId}</if>

        UNION
        SELECT
        ff.*
        FROM frm_function ff
        WHERE ff.is_need_auth = 0
        and ff.is_use = '1'

        )a
        ORDER BY a.fuc_order

    </select>

    <update id="modifyMgrConfig" parameterType="com.pmzhongguo.ex.framework.entity.FrmConfig">
        UPDATE frm_config
        <set>
            comp_name=#{comp_name},
            comp_en_name=#{comp_en_name},
            def_passwd=#{def_passwd},
            is_use_big_log=#{is_use_big_log},
            is_use_validate=#{is_use_validate},
            cms_def_author=#{cms_def_author},
            mail_reciver=#{mail_reciver},
            reg_reward_currencys=#{reg_reward_currencys},
            reg_reward_volume=#{reg_reward_volume},
            invite_reward_currencys=#{invite_reward_currencys},
            invite_reward_volume=#{invite_reward_volume},
            <if test="redis_ip != null and redis_ip != ''">
                redis_ip=#{redis_ip},
            </if>
            <if test="redis_port != null and redis_port != ''">
                redis_port=#{redis_port},
            </if>
            <if test="redis_pwd != null and redis_pwd != ''">
                redis_pwd=#{redis_pwd},
            </if>
            is_stop_ex=#{is_stop_ex},
            volume_multiply=#{volume_multiply},
            fraud_seconds=#{fraud_seconds},
            server_url=#{server_url},
            mail_name=#{mail_name},
            mail_nick_name=#{mail_nick_name},
            mail_password=#{mail_password},
            ex_secreat=#{ex_secreat},
            api_access_limit_rule=#{api_access_limit_rule},
            <if test="cron_job_ip != null and cron_job_ip != ''">
                cron_job_ip=#{cron_job_ip},
            </if>
            <if test="eoslist != null and eoslist != ''">
                eoslist=#{eoslist},
            </if>
            otc_deposit_currency=#{otc_deposit_currency},
            otc_deposit_volume=#{otc_deposit_volume},
            return_commi_rate=#{return_commi_rate},
            return_commi_time=#{return_commi_time},
            withdraw_need_identity=#{withdraw_need_identity}
        </set>
    </update>

    <select id="getUserRoleInfo" parameterType="int" resultType="java.util.HashMap">
		SELECT * FROM frm_role a,frm_role_user b
		WHERE a.id = b.frm_role_id
		AND b.frm_user_id=#{userId}
	</select>

    <update id="updateUser" parameterType="com.pmzhongguo.ex.framework.entity.FrmUser">
		UPDATE frm_user u SET u.is_can_login = #{is_can_login},u.user_real_name=#{user_real_name} WHERE u.id=#{id}
	</update>

    <update id="resetUserPassword" parameterType="java.util.Map">
		UPDATE frm_user u SET u.user_pwd =#{password} WHERE u.id=#{userId}
	</update>

    <select id="getAllFuncs" parameterType="int" resultType="java.util.HashMap">
        SELECT a.*,
        CASE a.is_need_auth
        WHEN 0 THEN 1
        ELSE a.ufunc
        END AS haveright
        FROM(
        SELECT f.*,
        IFNULL(( SELECT 1 FROM frm_user_function uf WHERE uf.frm_function_id =f.id AND uf.frm_user_id=#{userId}),0)AS
        ufunc

        FROM frm_function f
        WHERE f.is_use ='1'
        <!--  AND f.is_display_in_menu=1-->
        ORDER BY f.fuc_order ASC
        )a
    </select>


    <delete id="deleteRightRole" parameterType="int">
      	DELETE FROM frm_role_function WHERE frm_role_id =#{roleId}
    </delete>

    <delete id="deleteRightUser" parameterType="int">
      	DELETE FROM frm_user_function WHERE frm_user_id =#{userId}
    </delete>

    <insert id="insertRightRoleBatch">
        insert into frm_role_function values
        <!-- 注意 insert into t_vacation values 不要写在循环里,其次 #{vacation.em_id} 的方式,其中vacation 是item的值-->
        <foreach collection="list" item="rightUserRoleDto" index="index" separator=",">
            (#{rightUserRoleDto.roleId},#{rightUserRoleDto.funcId})
        </foreach>
    </insert>

    <insert id="insertRightUserBatch">
        insert into frm_user_function values
        <!-- 注意 insert into t_vacation values 不要写在循环里,其次 #{vacation.em_id} 的方式,其中vacation 是item的值-->
        <foreach collection="list" item="rightUserRoleDto" index="index" separator=",">
            (#{rightUserRoleDto.userId},#{rightUserRoleDto.funcId})
        </foreach>
    </insert>

    <insert id="addUser" parameterType="com.pmzhongguo.ex.framework.entity.FrmUser">
    	INSERT INTO frm_user(user_real_name,user_name,user_pwd,mobile_phone,google_auth_key,is_can_login,otc_owner_id) 
    	VALUES(#{user_real_name},#{user_name},#{user_pwd},#{mobile_phone},#{google_auth_key},#{is_can_login},#{otc_owner_id})
    </insert>

    <update id="editUser" parameterType="com.pmzhongguo.ex.framework.entity.FrmUser">
		UPDATE frm_user SET 
		user_real_name=#{user_real_name}, 
		user_name=#{user_name},
		mobile_phone=#{mobile_phone},
		google_auth_key=#{google_auth_key},
		is_can_login=#{is_can_login},
		otc_owner_id=#{otc_owner_id} 
		where id = #{id}
    </update>

    <update id="delUser" parameterType="int">
    	update frm_user set  is_deleted =1 where id=#{id}
    </update>

    <insert id="logVisit" parameterType="java.util.Map">
    	 INSERT INTO frm_log VALUES(#{userName},#{userRealName},now(),#{userIp},#{operDesc},#{operUrl})
    </insert>

    <!-- 获得一级菜单 -->
    <select id="getTopMenuList" parameterType="int" resultType="java.util.HashMap">
    	SELECT
		  ff.*
		FROM frm_function ff
		WHERE ff.fuc_parent_id='0'
		ORDER BY ff.fuc_order
	
    </select>

    <!-- 获得一级菜单对应的二级菜单 -->
    <select id="getSubMenuList" parameterType="int" resultType="java.util.HashMap">
    	SELECT
		  ff.*
		FROM frm_function ff
		WHERE ff.fuc_parent_id=#{parent_id}
		ORDER BY ff.fuc_order
	
    </select>

    <select id="loadOperLogPage" parameterType="java.util.Map" resultType="java.util.HashMap">
        SELECT l.user_name, l.user_real_name, l.user_ip, REPLACE(l.oper_desc, '"', '”') oper_desc, l.oper_url,
        DATE_FORMAT(l.oper_time,'%y-%m-%d %H:%i:%s')AS timestr
        FROM frm_log l
        WHERE 1=1
        <if test="null != startDate and  startDate !=''">
            AND l.oper_time >= #{startDate}
        </if>
        <if test="null != endDate and  endDate !=''">
            <![CDATA[
    			 AND l.oper_time< #{endDate}
    		]]>
        </if>
        <if test="null != user_real_name and  user_real_name !=''">
            and l.user_real_name like concat('%',#{user_real_name},'%')
        </if>
        <if test="null != oper_desc and oper_desc != ''">
            and l.oper_desc like concat('%',#{oper_desc},'%')
        </if>
    </select>
</mapper>